# -*- coding: utf-8 -*-
"""Makanan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GTkJJ-FMbybrBbf2cfhpPeFXq_LNgbGf
"""

import pandas as pd
import streamlit as st

# Baca File
file_path = 'nutrition.csv'
df = pd.read_csv(file_path)

# Fungsi Keanggotaan Fuzzy
def fuzzy_lapar(lapar_score):
    ringan = max(0, min(1, (5 - lapar_score)/5))
    sedang = 1 - abs((lapar_score - 5)/5)
    sangat_lapar = max(0, min(1, (lapar_score - 5)/5))
    return {'ringan': ringan, 'sedang': sedang, 'sangat_lapar': sangat_lapar}

def fuzzy_mood(mood_score):
    sedih = max(0, min(1, (5 - mood_score)/5))
    fokus = 1 - abs((mood_score - 5)/5)
    lelah = max(0, min(1, (mood_score - 5)/5))
    return {'sedih': sedih, 'fokus': fokus, 'lelah': lelah}

def fuzzy_waktu(waktu):  # string
    return {
        'sarapan': 1 if waktu == 'sarapan' else 0,
        'makan siang': 1 if waktu == 'makan siang' else 0,
        'makan malam': 1 if waktu == 'makan malam' else 0,
    }

# Inferensi Fuzzy Tsukamoto
def inferensi_tsukamoto(mood_score, lapar_score, waktu_makan, df):
    mood_fz = fuzzy_mood(mood_score)
    lapar_fz = fuzzy_lapar(lapar_score)
    waktu_fz = fuzzy_waktu(waktu_makan)

    rules = [
        {'mood': 'sedih', 'lapar': 'ringan', 'waktu': 'sarapan', 'z_func': lambda r: r['carbohydrate']},
        {'mood': 'sedih', 'lapar': 'sedang', 'waktu': 'sarapan', 'z_func': lambda r: (r['carbohydrate'] + r['proteins']) / 2},
        {'mood': 'sedih', 'lapar': 'sangat_lapar', 'waktu': 'sarapan', 'z_func': lambda r: r['calories']},
        {'mood': 'sedih', 'lapar': 'ringan', 'waktu': 'makan siang', 'z_func': lambda r: r['carbohydrate']},
        {'mood': 'sedih', 'lapar': 'sedang', 'waktu': 'makan siang', 'z_func': lambda r: r['proteins']},
        {'mood': 'sedih', 'lapar': 'sangat_lapar', 'waktu': 'makan siang', 'z_func': lambda r: r['calories']},
        {'mood': 'sedih', 'lapar': 'ringan', 'waktu': 'makan malam', 'z_func': lambda r: -r['fat']},
        {'mood': 'sedih', 'lapar': 'sedang', 'waktu': 'makan malam', 'z_func': lambda r: -r['fat']},
        {'mood': 'sedih', 'lapar': 'sangat_lapar', 'waktu': 'makan malam', 'z_func': lambda r: r['calories']},
        {'mood': 'lelah', 'lapar': 'ringan', 'waktu': 'sarapan', 'z_func': lambda r: (r['carbohydrate'] + r['proteins']) / 2},
        {'mood': 'lelah', 'lapar': 'sedang', 'waktu': 'sarapan', 'z_func': lambda r: r['proteins']},
        {'mood': 'lelah', 'lapar': 'sangat_lapar', 'waktu': 'sarapan', 'z_func': lambda r: r['calories']},
        {'mood': 'lelah', 'lapar': 'ringan', 'waktu': 'makan siang', 'z_func': lambda r: (r['proteins'] + r['calories']) / 2},
        {'mood': 'lelah', 'lapar': 'sedang', 'waktu': 'makan siang', 'z_func': lambda r: r['proteins']},
        {'mood': 'lelah', 'lapar': 'sangat_lapar', 'waktu': 'makan siang', 'z_func': lambda r: r['calories']},
        {'mood': 'lelah', 'lapar': 'ringan', 'waktu': 'makan malam', 'z_func': lambda r: r['proteins']},
        {'mood': 'lelah', 'lapar': 'sedang', 'waktu': 'makan malam', 'z_func': lambda r: r['proteins']},
        {'mood': 'lelah', 'lapar': 'sangat_lapar', 'waktu': 'makan malam', 'z_func': lambda r: r['calories']},
        {'mood': 'fokus', 'lapar': 'ringan', 'waktu': 'sarapan', 'z_func': lambda r: r['carbohydrate']},
        {'mood': 'fokus', 'lapar': 'sedang', 'waktu': 'sarapan', 'z_func': lambda r: r['proteins']},
        {'mood': 'fokus', 'lapar': 'sangat_lapar', 'waktu': 'sarapan', 'z_func': lambda r: (r['proteins'] + r['calories']) / 2},
        {'mood': 'fokus', 'lapar': 'ringan', 'waktu': 'makan siang', 'z_func': lambda r: r['carbohydrate']},
        {'mood': 'fokus', 'lapar': 'sedang', 'waktu': 'makan siang', 'z_func': lambda r: r['proteins']},
        {'mood': 'fokus', 'lapar': 'sangat_lapar', 'waktu': 'makan siang', 'z_func': lambda r: r['calories']},
        {'mood': 'fokus', 'lapar': 'ringan', 'waktu': 'makan malam', 'z_func': lambda r: (r['proteins'] + r['carbohydrate']) / 2},
        {'mood': 'fokus', 'lapar': 'sedang', 'waktu': 'makan malam', 'z_func': lambda r: r['proteins']},
        {'mood': 'fokus', 'lapar': 'sangat_lapar', 'waktu': 'makan malam', 'z_func': lambda r: r['calories']},
    ]

    rekomendasi = []

    for _, row in df.iterrows():
        z_total = 0
        alpha_total = 0

        for rule in rules:
            alpha = min(
                mood_fz[rule['mood']],
                lapar_fz[rule['lapar']],
                waktu_fz[rule['waktu']]
            )
            z = rule['z_func'](row)
            z_total += alpha * z
            alpha_total += alpha

        skor = z_total / alpha_total if alpha_total > 0 else 0
        rekomendasi.append((row['name'], skor, row))

    rekomendasi = sorted(rekomendasi, key=lambda x: x[1], reverse=True)
    top5 = pd.DataFrame([r[2] for r in rekomendasi[:5]])
    return top5
    
required_columns = ['name', 'calories', 'proteins', 'fat', 'carbohydrate', 'image']
if not all(col in df.columns for col in required_columns):
    st.error("Dataset harus memiliki kolom: name, calories, proteins, fat, carbohydrate, image")
    st.stop()

st.set_page_config(
    page_title="Rekomendasi Makanan",
    page_icon="üçΩÔ∏è",
    layout="centered",
    initial_sidebar_state="collapsed",
)
hide_streamlit_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)
st.title("üçΩÔ∏èRekomendasi Makanan")
st.subheader("Masukkan Kondisi Anda:")

# Form input
with st.form("input_form"):
    mood = st.selectbox("Mood Anda", ['lelah', 'sedih', 'ingin fokus', 'diet'])
    lapar = st.selectbox("Tingkat Lapar", ['sangat lapar', 'sedang', 'ringan'])
    waktu = st.selectbox("Waktu Makan", ['sarapan', 'makan siang', 'makan malam'])
    submitted = st.form_submit_button("Tampilkan Rekomendasi")

if submitted:
    # Mapping nilai linguistik ke skor numerik
    mood_map = {'sedih': 2, 'ingin fokus': 5, 'lelah': 8}
    lapar_map = {'ringan': 2, 'sedang': 5, 'sangat lapar': 8}
    filtered_df = df.copy()

    if mood == 'diet':
        hasil = filtered_df[(filtered_df['calories'] < 250) & (filtered_df['fat'] < 10)].sort_values(by='calories').head(5)
    else:
        mood_score = mood_map[mood]
        lapar_score = lapar_map[lapar]
        hasil = inferensi_tsukamoto(mood_score, lapar_score, waktu, filtered_df)

    st.subheader("üç± Rekomendasi Makanan:")
    if hasil.empty:
        st.warning("Maaf, tidak ada rekomendasi yang cocok.")
    else:
        for _, row in hasil.iterrows():
            st.markdown(f"### {row['name']}")
            if pd.notna(row['image']) and row['image'] != "":
                st.image(row['image'], width=300)
            st.markdown(f"**Kalori:** {row['calories']} kcal")
            st.markdown(f"**Protein:** {row['proteins']} g")
            st.markdown(f"**Lemak:** {row['fat']} g")
            st.markdown(f"**Karbohidrat:** {row['carbohydrate']} g")
            st.markdown("---")
